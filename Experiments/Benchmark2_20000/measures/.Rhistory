allMeasures <- foreach(m = measures) %do% {
data.frame( expID = as.character(expName), off1 = naVec, off2 = naVec, off3 = naVec, off4 = naVec, off5 = naVec)
}
names(allMeasures) <- measures
foreach(file = allFiles, i = 1:length(allFiles)) %:% foreach(m = measures) %do% {
d <- read.csv(file)
df <- allMeasures[[m]]
df[i,2:6] <- d[,m]
allMeasures[[m]] <- df
}
foreach(m = allMeasures, mName = measures) %do% {
write.csv(x = m, file = file.path("measures", paste(mName,".csv", sep = "")))
}
setwd("C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_NumModel/MixGaussiansK3D3N0_10000")
allFiles <- list.files(pattern = "[.]csv")
expName <- foreach(file = allFiles, .combine = 'rbind') %do% sub("off.*", "", file)
d <- read.csv(allFiles[[length(allFiles)]])
measures <- names(d)
naVec <- rep(NA, times = length(allFiles))
allMeasures <- foreach(m = measures) %do% {
data.frame( expID = as.character(expName), off1 = naVec, off2 = naVec, off3 = naVec, off4 = naVec, off5 = naVec)
}
names(allMeasures) <- measures
foreach(file = allFiles, i = 1:length(allFiles)) %:% foreach(m = measures) %do% {
d <- read.csv(file)
df <- allMeasures[[m]]
df[i,2:6] <- d[,m]
allMeasures[[m]] <- df
}
foreach(m = allMeasures, mName = measures) %do% {
write.csv(x = m, file = file.path("measures", paste(mName,".csv", sep = "")))
}
setwd("C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_NumModel/MixGaussiansK4D2N0_10000")
allFiles <- list.files(pattern = "[.]csv")
expName <- foreach(file = allFiles, .combine = 'rbind') %do% sub("off.*", "", file)
d <- read.csv(allFiles[[length(allFiles)]])
measures <- names(d)
naVec <- rep(NA, times = length(allFiles))
allMeasures <- foreach(m = measures) %do% {
data.frame( expID = as.character(expName), off1 = naVec, off2 = naVec, off3 = naVec, off4 = naVec, off5 = naVec)
}
names(allMeasures) <- measures
foreach(file = allFiles, i = 1:length(allFiles)) %:% foreach(m = measures) %do% {
d <- read.csv(file)
df <- allMeasures[[m]]
df[i,2:6] <- d[,m]
allMeasures[[m]] <- df
}
foreach(m = allMeasures, mName = measures) %do% {
write.csv(x = m, file = file.path("measures", paste(mName,".csv", sep = "")))
}
setwd("C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_NumModel/BarsGaussAN0_10000/measures")
allFiles <- list.files(pattern = "[.]csv")
install.packages("stargazer")
library(stargazer)
setwd("C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_NumModel/BarsGaussAN0_10000/measures")
df <- read.csv("numMicroClusters.csv")
View(df)
df[,1]
df[,1] <- NULL
View(df)
View(df)
stargazer(df)
stargazer(df, summary = FALSE)
stargazer(df[,1:6], summary = FALSE)
setwd("~/")
library(streamMOA)
source('~/main2.R')
source('~/main2.R')
clustream <- DSC_CluStream()
clustream$description
library(stream)
stream <- DSD_Gaussians()
clustream <- DSC_CluStream(k = 3)
update(clustream, stream, n = 2000)
clustream
source('~/main2.R')
clustream
stream <- DSD_Gaussians()
clustream <- DSC_CluStream(k = 3)
update(clustream, stream, n = 2000)
clustream
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
library(stream)
stream <- DSD_Benchmark(1)
filePath <- file.path(basePath, "Benchmark1_1100.csv", sep = "")
filePath <- file.path(basePath, "Benchmark1_1100.csv")
basePath <- file.path("~", "datasets", "synthetic", "new")
filePath <- file.path(basePath, "Benchmark1_1100.csv")
write_stream(stream, file = filePath, n = 11000, sep = ",", class = TRUE, header = TRUE)
syntheticPath <- file.path("~", "datasets", "synthetic", "new")
streams <- as.list(list.files(syntheticPath, pattern = "[.]csv", full.names = TRUE, recursive = FALSE, include.dirs = FALSE))
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
warnings()
source('~/main2.R')
source('~/main2.R')
warnings()
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
source('~/main2.R')
algorithms$fMicro2Kmeans3 <- list(fun=fuzzyMicro2Kmeans, param=list(maxCF = 100, threshold = 0.8, mergeThreshold = 0.8, lambda = 0.25, m = 2, off = 5))
source('~/main2.R')
source('~/main2.R')
kdd99Orig <- read.csv("datasets/KDDCup99/kddcup_data_10_percent_corrected", stringsAsFactors = FALSE)
colnames <- read.table("datasets/KDDCup99/kddcup_names.txt", skip = 1, sep = ":")
names(kdd99Orig) <- colnames$V1
d <- dim(kdd99Orig)
names(kdd99Orig)[d[2]] <- "class"
sum_label <- aggregate(rep(1, d[1]),
by = list(kdd99Orig$class),
FUN = sum)
names(sum_label) <- c("class", "count")
barplot(beside = TRUE, log10(sum_label$count),
names.arg = sum_label$class, ylim = c(0,6),
xlab = "Classe", ylab = "log(Cont)",
col = "Blue", main = "Distribuição de Classes")
kdd99Min <- kdd99Orig
kdd99Min$class
library(caret)
install.packages("caret")
library(caret)
l <- kdd99Orig$class
sum(is.na(l))
nzvcol <- nearZeroVar(kdd99Orig)
kdd99Orig <- kdd99Orig[,-nzvcol]
kdd99Orig$class <- factor(kdd99Orig$class)
d <- dim(kdd99Orig)
kdd99_10p_Orig <- kdd99Orig
write.csv(x = kdd99_10p_Orig, file = "datasets/KDDCup99/kdd99_10p_Orig.csv")
write.csv(x = kdd99_10p_Orig, file = "datasets/KDDCup99/kdd99_10p_Orig.csv", row.names = FALSE)
rm( list = ls() )
train_raw <- read.csv("datasets/KDDCup99/kddcup_data_corrected", stringsAsFactors = FALSE)
colnames <- read.table("datasets/KDDCup99/kddcup_names.txt", skip = 1, sep = ":")
names(train_raw) <- colnames$V1
d <- dim(train_raw)
names(train_raw)[d[2]] <- "label"
sum_label <- aggregate(rep(1, d[1]),
by = list(train_raw$label),
FUN = sum)
names(sum_label) <- c("label", "count")
barplot(beside = TRUE, log10(sum_label$count),
names.arg = sum_label$label, ylim = c(0,6),
xlab = "Classe", ylab = "log(Cont)",
col = "Blue", main = "Distribuição de Classes")
library(caret)
nzvcol <- nearZeroVar(train_raw)
train_raw <- train_raw[, -nzvcol]
write.csv(x = train_raw, file = "datasets/KDDCup99/kdd99_Orig.csv", row.names = FALSE)
rm(list = ls())
kdd99 <- read.csv("datasets/KDDCup99/kdd99_10p_Orig.csv")
kdd99$protocol_type <- NULL
kdd99$service <- NULL
kdd99$flag <- NULL
kdd99$logged_in <- NULL
write.csv(x = kdd99, file = "datasets/KDDCup99/kdd99_10p_NoSymb.csv", row.names = FALSE)
kdd99 <- read.csv("datasets/KDDCup99/kdd99_Orig.csv")
kdd99$protocol_type <- NULL
kdd99$service <- NULL
kdd99$flag <- NULL
kdd99$logged_in <- NULL
write.csv(x = kdd99, file = "datasets/KDDCup99/kdd99_NoSymb.csv", row.names = FALSE)
kdd99 <- read.csv("datasets/KDDCup99/kdd99_10p_Orig.csv")
numeralize <- function(col) {
# Find the classification of this column.
char <- unique(col)
# Change the type to its corresponding type.
for (i in 1: length(char)) {
col <- replace(col, col == char[i], i)
}
col
}
training_engineer <- within(kdd99, {
protocol_type <- numeralize(protocol_type)
service <- numeralize(service)
flag <- numeralize(flag)
label <- numeralize(label)
} )
training_engineer <- within(kdd99, {
protocol_type <- numeralize(protocol_type)
service <- numeralize(service)
flag <- numeralize(flag)
class <- numeralize(class)
} )
warnings()
kdd99 <- read.csv("datasets/KDDCup99/kdd99_Orig.csv")
training_engineer <- unique(kdd99)
d_unique <- dim(training_engineer)
d_percent <- (d[1] - d_unique[1]) / d[1]
d <- d_unique
training_engineer <- within(training_engineer, {
protocol_type <- numeralize(protocol_type)
service <- numeralize(service)
flag <- numeralize(flag)
class <- numeralize(class)
} )
training_engineer$service
unique(training_engineer$service)
write.csv(x = training_engineer, file = "datasets/KDDCup99/kdd99_unique.csv", row.names = FALSE)
training_engineer$protocol_type <- NULL
training_engineer$service <- NULL
training_engineer$flag <- NULL
training_engineer$logged_in <- NULL
write.csv(x = training_engineer, file = "datasets/KDDCup99/kdd99_uniq_noSym.csv", row.names = FALSE)
rm(list = ls())
train_raw <- read.csv("datasets/Covertype/covtype.data")
names(train_raw)
quali <- train_raw[,1:10]
quali$class <- train_raw[,55]
names(quali) <- c("elevation", "aspect", "slope", "horizontal_distance_to_hydrology", "vertical_distance_to_hydrology", "horizontal_distance_to_roadways", "hillshade_9am", "hillshade_noon", "hillshade_3pm", "horizontal_distance_to_fire_points", "class")
quali$class <- factor(quali$class)
nzvcol <- nearZeroVar(quali)
write.csv(x = quali, file = "datasets/Covertype/covertype_noBin.csv", row.names = FALSE)
l <- list(1, 2, 3, 4, 5,6, 7)
l[[2:5]]
l[2:5
]
l1 <- list(LETTERS[1:10])
l1
l1 <- list(LETTERS)
l1 <- LETTERS
arr <- expand.grid(l1 = l, l2 = l1)
arr <- as.data.frame(t(arr), stringsAsFactors = FALSE)
arr
source('~/main.R')
source('~/main.R')
#algorithms$fMicroKMeans13 <- list(fun=fuzzyMicroKmeans, param=list(maxCF = 50, threshold = 0.9, mergeThreshold = 0.8, m = 2, off = 5))
source('~/main.R')
install.packages("fclust")
x <- 1:20
delta <- 2^(-0.01*x)
x <- 0:20
delta <- 2^(-0.01*x)
library(stream)
library(foreach)
source('~/algorithms/stream/DSC_FuzzyMicroCluster2.R')
source('~/algorithms/stream/fMC.R')
set.seed(1000)
stream <- DSD_Gaussians(k=3)
micro <- DSC_FuzzyMicroCluster2(maxCF = 100, lambda = 0.25)
macro <- DSC_Kmeans(k = 3)
update(micro, stream, n = 10)
recluster(macro, micro)
library(stream)
library(foreach)
source('~/algorithms/stream/DSC_FuzzyMicroCluster2.R')
source('~/algorithms/stream/fMC.R')
set.seed(1000)
stream <- DSD_Gaussians(k=3)
micro <- DSC_FuzzyMicroCluster2(maxCF = 100, lambda = 0.25)
macro <- DSC_Kmeans(k = 3)
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, ty
pe = "both", xlim = c(0,1), ylim = c(0,1))
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
source('~/bla.R')
source('~/bla.R')
source('~/bla.R')
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 10)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 100)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 100)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
update(micro, stream, n = 100)
recluster(macro, micro)
plot(macro, stream, type = "both", xlim = c(0,1), ylim = c(0,1))
source('~/bla.R')
source('~/bla.R')
source('~/bla.R')
source('~/bla.R')
source('~/bla.R')
source('~/bla.R')
source('~/bla.R')
source('~/main.R')
View(getStatsFromDF)
bla <- getStatsFromDF(streams[[1]])
getStatsFromDF(streams[[1]])
source('~/runExperiment.R')
getStatsFromDF(streams[[1]])
source('~/runExperiment.R')
getStatsFromDF(streams[[1]])
summary(df)
df <- read.csv(file = sstreams[[1]], header = TRUE)
df <- read.csv(file = streams[[1]], header = TRUE)
summary(df)
data <- summary(df)
data <- as.data.frame(summary(df))
View(data)
data <- summarise(df)
View(data)
dfNames <- names(df)
dfNames
dfNames[-"class"]
dfNames["class"]
class(dfNames)
dfNames = "class"
dfNames <- names(df)
dfNames == "class"
dfNames != "class"
dfNames[dfNames != "class"]
dfNumClasses <- n_distinct(na.omit(df['class']))
source('~/runExperiment.R')
getStatsFromDF(streams[[1]])
source('~/main.R')
beepr::beep(3)
sink(paste("resRBF40k_",today,".txt", sep = ""),append = TRUE)
sink()
source('~/main.R')
source('~/main.R')
View(fuzzyMicro2FCM)
View(fuzzyMicro2FCM)
off = 5
source('~/main.R')
source('~/main.R')
source('~/main.R')
source('~/main.R')
source('~/main.R')
source('~/main.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark1_11000/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateMeasureTables.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateMeasureTables.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateMeasureTables.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateMeasureTables.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark1_5500/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark1_11000/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark2_10000/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark2_20000/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/generateBasePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark1_5500/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark1_11000/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark2_10000/generatePlots.R')
source('C:/Users/Priscilla/Dropbox/PhD/Tese/Experimentos/R/Experiments_BenchGen/Benchmark2_20000/generatePlots.R')
library(stream, quietly = TRUE)
library(streamMOA, quietly = TRUE)
syntheticPath <- file.path("~", "datasets", "synthetic")
streams <- as.list(list.files(syntheticPath, full.names = TRUE, recursive = FALSE, include.dirs = FALSE))
basePath <- file.path("~", "datasets", "synthetic", "plots")
str <- streams[[4]]
syntheticPath <- file.path("~", "datasets", "synthetic","benchGen")
streams <- as.list(list.files(syntheticPath, full.names = TRUE, recursive = FALSE, include.dirs = FALSE))
basePath <- file.path("~", "datasets", "synthetic", "plots")
str <- streams[[4]]
streamName <- basename(str)
streamName <- sub("[.]csv",".pdf",streamName)
stream <- DSD_ReadCSV(str, class = 4, header = TRUE)
animate_data(stream, horizon = 500, n = 20000, xlim=c(0,1), ylim=c(0,1))
stream <- DSD_ReadCSV(str, class = 2, header = TRUE)
animate_data(stream, horizon = 500, n = 20000, xlim=c(0,1), ylim=c(0,1))
streamName <- basename(str)
streamName <- sub("[.]csv",".pdf",streamName)
stream <- DSD_ReadCSV(str, class = 3, header = TRUE)
animate_data(stream, horizon = 500, n = 20000, xlim=c(0,1), ylim=c(0,1))
animate_data(stream, horizon = 500, n = 20000, xlim=c(-0.5,1.5), ylim=c(-0.5,1.5))
animate_data(stream, horizon = 500, n = 20000, xlim=c(-0.5,1.5), ylim=c(-0.5,1.5))
animate_data(stream, horizon = 500, n = 20000, xlim=c(-0.5,1.5), ylim=c(-0.5,1.5))
saveHTML(ani.replay())
library(animation)
animation::ani.options(interval=.1) ## change speed
saveHTML(ani.replay())
animate_data(stream, horizon = 500, n = 12000, xlim=c(-0.5,1.5), ylim=c(-0.5,1.5))
reset(stream)
reset_stream(stream)
animate_data(stream, horizon = 500, n = 12000, xlim=c(-0.5,1.5), ylim=c(-0.5,1.5))
